version: '3.9'

networks:
  services-network:
    driver: bridge

services:
  rabbitmq:
    image: 'rabbitmq:3-management'
    networks:
      - services-network
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    ports:
      - "8080:15672"
      - "5001:5673" # Expose this port while running the producer and consumer services locally
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 15s
      retries: 5
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    volumes:
      - ./server:/go/src/app/server
    ports:
      - 8090:8090
    networks:
      - services-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    depends_on:
      rabbitmq:
        condition: service_healthy
        #  env_file:
        #      - .env
        #  # restart: on-failure
        #  depends_on:
        #      rabbitmq:
        #          condition: service_healthy

  mockservice:
    #        container_name: mockservice
    build:
      context: .
      # context: ./mockservice
      # target: debug
      target: mockservice
      dockerfile: ./mockservice/Dockerfile
    volumes:
      - ./mockservice:/go/src/app/mockservice
    ports:
      - 8091:8091
    networks:
      - services-network
      # frontend:
      #   build:
      #     context: ./ForexDashboard
      #   ports:
      #     - 8089:8089
      #   networks:
      #     - services-network

  dbservice:
    build:
      context: .
      dockerfile: ./dbservice/Dockerfile
    volumes:
      - ./dbservice:/go/src/app/dbservice
    ports:
      - 8092:8092
    networks:
      - services-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
    ports:
      - '5433:5432'
    volumes:
      - database_postgres:/var/lib/postgresql/data
    # networks:
    #   - fullstack
    networks:
      - services-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - postgres
    ports:
      - "5050:80"
    # networks:
    #   - fullstack
    networks:
      - services-network
    restart: unless-stopped

volumes:
  database_postgres:
